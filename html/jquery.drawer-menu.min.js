/* Drawer-menu
 * varsion : v1.0.0
 * date    : 2014-01-23
 * http://www.coosy.co.jp/
 * Copyright (c) 2014 COOSY inc.inc */
(function($){ var defalut_name = 'panels'; var opened = null; var moving = false; var privateMethods = { scroll : function(expr){ var box = $(expr)[0]; var touchStartPositionX; var touchStartPositionY; var touchMovePositionX; var touchMovePositionY; var moveFarX; var moveFarY; var startScrollX; var startScrollY; var moveScrollX; var moveScrollY; box.addEventListener("touchstart",touchHandler,false); box.addEventListener("touchmove",touchHandler,false); function touchHandler(e){ var touch = e.touches[0]; if(e.type == "touchstart"){ touchStartPositionX = touch.pageX; touchStartPositionY = touch.pageY; startScrollX = $(expr).scrollLeft(); startScrollY = $(expr).scrollTop();}
if(e.type == "touchmove"){ e.preventDefault(); touchMovePositionX = touch.pageX; touchMovePositionY = touch.pageY; moveFarX = touchStartPositionX - touchMovePositionX; moveFarY = touchStartPositionY - touchMovePositionY; moveScrollX = startScrollX +moveFarX; moveScrollY = startScrollY +moveFarY; $(expr).scrollLeft(moveScrollX); $(expr).scrollTop(moveScrollY);}
}
}, resize : function(expr, name, value){ return (0 < value.lastIndexOf('%')) ?
(parseInt($(expr)['outer' + name.charAt(0).toUpperCase() + name.slice(1)]()) * parseInt(value) * 0.01) + 'px' : value;}, getObject : function(name){ return $('[drawer-menu="'+ name +'"]:first');}, execute_child : function(action, name, callback){ if(moving) return; if(!name) name = defalut_name + ".main"; var names = name.split('.'); if(names.length < 2){ names[1] = names[0]; names[0] = defalut_name;}
var $menu = privateMethods.getObject(names[0]), $child = $menu.find('[drawer-menu-panel="'+ names[1] +'"]:first'), $opend = $menu.find('[drawer-menu-panel="'+ names[1] +'"]:visible'), $ather = $menu.find('[drawer-menu-panel][drawer-menu-panel!="'+ names[1] +'"]'), settings = $menu.data(), childCss = {}; if( (action == 'open' || action == 'toggle') && $child.is(':hidden')){ childCss[settings.child_side] = '0px'; if($menu.is(':hidden')){ $ather.hide().css(settings.child_side, '-100%'); $child.show().css(childCss); methods.open(names[0], callback); return;}
$child.data('closeTo', $opend.attr('drawer-menu-panel')); $child.show().css('z-index', '1'); $child.animate(childCss, settings.speed, function(){ $ather.hide().css(settings.child_side, '-100%'); if(typeof callback === 'function') { callback(name);}
});}
else{ $menu.find('[drawer-menu-panel="'+ (($child.data('closeTo')) ? $child.data('closeTo') : 'main' ) +'"]')
.css(settings.child_side, '0px')
.css('z-index', '-1')
.show(); childCss[settings.child_side] = '-100%'; $child.animate(childCss, settings.speed, function(){ $child.hide(); if(typeof callback === 'function') { callback(name);}
});}
}, execute: function(action, name, callback) { if(moving) return; if(!name) name = defalut_name; var $menu = privateMethods.getObject(name), settings = $menu.data(); if(!Object.keys(settings).length) return; var $body = $($menu.data('body')), $page = $(settings.body).children(':not([drawer-menu])'), width = settings.width, fnAnimeEnd, bodyCss = {}, menuCss = {}; if( (action == 'open' || action == 'toggle') && $menu.is(':hidden') ){ if(opened){ methods.close(opened, function(){ methods.open(name, callback);}); return;}
moving = true; settings.beforeOpen(); fnAnimeEnd = function(){ moving = false; opened = name; if(typeof callback === 'function') { callback(name);}
}
bodyCss[settings.side] = width; menuCss[settings.side] = '0px'; $menu.show(); $body.attr('drawer-menu-state','open'); if(settings.displace){ $page.css('z-index', '1'); $menu.css('z-index', '-1'); $body.animate(bodyCss, settings.speed, fnAnimeEnd);}else{ $page.css('z-index', '-1'); $menu.css('z-index', '1'); $menu.animate(menuCss, settings.speed, fnAnimeEnd);}
settings.afterOpen();}
else{ moving = true; settings.beforeClose(); fnAnimeEnd = function(){ moving = false; opened = null; $menu.hide(); $body.attr('drawer-menu-state','close'); $menu
.find('[drawer-menu-panel="main"]')
.css(settings.child_side, '0px')
.show()
.end()
.find('[drawer-menu-panel][drawer-menu-panel!="main"]')
.hide()
.css(settings.child_side, '-100%'); if(typeof callback === 'function') { callback(name);}
}
bodyCss[settings.side] = '0px'; menuCss[settings.side] = '-' + width; if(settings.displace){ $body.animate(bodyCss, settings.speed, fnAnimeEnd);}else{ $menu.animate(menuCss, settings.speed, fnAnimeEnd);}
settings.afterClose();}
}
}
var methods = { init : function (name, options){ if(!name){ name = defalut_name;}else if (typeof name == 'object'){ options = name; name = defalut_name;}
var defaults = { body : 'body', speed : 500, side : 'left', child_speed : 500, child_side : 'left', width : '80%', displace : true, tapToClose : true, beforeOpen : function () {}, beforeClose : function () {}, afterOpen : function () {}, afterClose : function () {}, }
var $this = privateMethods.getObject(name), settings = $.extend(defaults, options), thisCss; if(settings.side != 'left' && settings.side != 'right' ){ settings.side = 'left';}
$this.find('[drawer-menu-panel][drawer-menu-panel!="main"]').each(function(){ $(this).css(settings.child_side, '-100%');}); $this.css({ 'width' : settings.width })
.css('height', $this.height)
.css(settings.side, '-' + settings.width)
.data(settings); if(settings.tapToClose){ ((typeof settings.tapToClose == 'string') ? $(settings.tapToClose) : $(settings.body).children(':not([drawer-menu])') ).bind('click touchstart', function(){ if(opened){ methods.close(opened);}
});}
}, open : function (name, callback){ privateMethods.execute('open', name, callback);}, close : function(name, callback){ privateMethods.execute('close', name, callback);}, toggle : function(name, callback){ privateMethods.execute('toggle', name, callback);}, child_open : function (name, callback){ privateMethods.execute_child('open', name, callback);}, child_close : function (name, callback){ privateMethods.execute_child('close', name, callback);}, child_toggle : function (name, callback){ privateMethods.execute_child('toggle', name, callback);}
}
$.drawer_menu = methods;})(jQuery); 